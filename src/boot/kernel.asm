bits 16
org 0x0

main:
	mov ax, 0x0013
	int 0x10

	push 0xa000
	pop es

	xor ax, ax
	xor di, di
	mov cx, 320*200
	rep stosb

	mov di, (320*72)+64
	xor ax, ax
	mov si, bitmap
lines_loop:
	mov cx, 4
.next_line:
	call draw_line
	add di, 320
	dec cx
	test cx, cx
	jnz .next_line
	inc ax
	cmp ax, 7
	je halt
	add di, 2*320
	add si, 24
	jmp lines_loop

	add di, 8*320

halt:
	cli
	hlt

draw_line:
	pusha
	xor bx, bx
	mov cx, 7
.loop:
	xor ax, ax
	bt [si + bx], cx
	jnc .write_pixel
	mov al, 2
.write_pixel:
	stosb
	dec cx
	cmp cx, 0
	jge .loop
	mov cx, 7
	inc bx
	cmp bx, 24
	jne .loop
.done:
	popa
	ret

bitmap:
	db 0xff,0xff,0xf0,0x00,0x00
	db 0x03,0xff,0xff,0xc0,0x00
	db 0x03,0xff,0xff,0xc0,0x00
	db 0x00,0x00,0x00,0xff,0x00
	db 0xff,0xff,0xff,0xff

	db 0x03,0xfc,0x00,0x00,0x00
	db 0xff,0x00,0x00,0xff,0x00
	db 0xff,0x00,0x00,0xff,0x00
	db 0x00,0x00,0x0f,0xf0,0x00
	db 0xf0,0x0f,0xf0,0x0f

	db 0x03,0xfc,0x00,0x00,0x00
	db 0xff,0x00,0x00,0xff,0x00
	db 0xff,0x00,0x00,0x00,0x00
	db 0x00,0x00,0xff,0x00,0x00
	db 0xc0,0x0f,0xf0,0x03

	db 0x03,0xfc,0x00,0x00,0x00
	db 0xff,0x00,0x00,0xff,0x00
	db 0x03,0xff,0xff,0xc0,0x00
	db 0x00,0x0f,0xf0,0x00,0x00
	db 0x00,0x0f,0xf0,0x00

	db 0x03,0xfc,0x00,0x03,0x00
	db 0xff,0x00,0x00,0xff,0x00
	db 0x00,0x00,0x00,0xff,0x00
	db 0x00,0xff,0x00,0x00,0x00
	db 0x00,0x0f,0xf0,0x00

	db 0x03,0xfc,0x00,0x0f,0x00
	db 0xff,0x00,0x00,0xff,0x00
	db 0xff,0x00,0x00,0xff,0x00
	db 0x0f,0xf0,0x00,0x00,0x00
	db 0x00,0x0f,0xf0,0x00

	db 0xff,0xff,0xff,0xff,0x00
	db 0x03,0xff,0xff,0xc0,0x00
	db 0x03,0xff,0xff,0xc0,0x00
	db 0xff,0x00,0x00,0x00,0x00
	db 0x00,0xff,0xff,0x00

